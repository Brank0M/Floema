/*! For license information please see main.4e2e02fc6ad08331e062.hot-update.js.LICENSE.txt */
self.webpackHotUpdatefloema("main",{"./node_modules/webpack/hot/dev-server.js":(o,e,n)=>{var t,r=function(){return t.indexOf(n.h())>=0},a=n("./node_modules/webpack/hot/log.js"),i=function e(){o.hot.check(!0).then((function(o){if(!o)return a("warning","[HMR] Cannot find update. "+("undefined"!=typeof window?"Need to do a full reload!":"Please reload manually!")),a("warning","[HMR] (Probably because of restarting the webpack-dev-server)"),void("undefined"!=typeof window&&window.location.reload());r()||e(),n("./node_modules/webpack/hot/log-apply-result.js")(o,o),r()&&a("info","[HMR] App is up to date.")})).catch((function(e){var n=o.hot.status();["abort","fail"].indexOf(n)>=0?(a("warning","[HMR] Cannot apply update. "+("undefined"!=typeof window?"Need to do a full reload!":"Please reload manually!")),a("warning","[HMR] "+a.formatError(e)),"undefined"!=typeof window&&window.location.reload()):a("warning","[HMR] Update failed: "+a.formatError(e))}))};n("./node_modules/webpack/hot/emitter.js").on("webpackHotUpdate",(function(e){t=e,r()||"idle"!==o.hot.status()||(a("info","[HMR] Checking for updates on the server..."),i())})),a("info","[HMR] Waiting for update signal from WDS...")},"./node_modules/webpack/hot/emitter.js":(o,e,n)=>{var t=n("./node_modules/events/events.js");o.exports=new t},"./node_modules/webpack/hot/log-apply-result.js":(o,e,n)=>{o.exports=function(o,e){var t=o.filter((function(o){return e&&e.indexOf(o)<0})),r=n("./node_modules/webpack/hot/log.js");(t.length>0&&(r("warning","[HMR] The following modules couldn't be hot updated: (They would need a full reload!)"),t.forEach((function(o){r("warning","[HMR]  - "+o)}))),e&&0!==e.length)?(r("info","[HMR] Updated modules:"),e.forEach((function(o){if("string"==typeof o&&-1!==o.indexOf("!")){var e=o.split("!");r.groupCollapsed("info","[HMR]  - "+e.pop()),r("info","[HMR]  - "+o),r.groupEnd("info")}else r("info","[HMR]  - "+o)})),e.every((function(o){return"number"==typeof o}))&&r("info",'[HMR] Consider using the optimization.moduleIds: "named" for module names.')):r("info","[HMR] Nothing hot updated.")}},"./node_modules/webpack/hot/log.js":o=>{var e="info";function n(){}function t(o){return"info"===e&&"info"===o||["info","warning"].indexOf(e)>=0&&"warning"===o||["info","warning","error"].indexOf(e)>=0&&"error"===o}function r(o){return function(e,n){t(e)&&o(n)}}o.exports=function(o,e){t(o)&&("info"===o?console.log(e):"warning"===o?console.warn(e):"error"===o&&console.error(e))};var a=console.group||n,i=console.groupCollapsed||n,d=console.groupEnd||n;o.exports.group=r(a),o.exports.groupCollapsed=r(i),o.exports.groupEnd=r(d),o.exports.setLogLevel=function(o){e=o},o.exports.formatError=function(o){var e=o.message,n=o.stack;return n?n.indexOf(e)<0?e+"\n"+n:n:e}}},(function(o){o.h=()=>"64a9f0e26c254da89892"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,